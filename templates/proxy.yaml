spec:
  templates:
  
  - name: start-proxy
    parent: generic-task
    daemon: true
    container:
      readinessProbe:
        httpGet:
          path: '/'
          port: 8080
        initialDelaySeconds: 5
        timeoutSeconds: 1
    inputs:
      parameters:
      - name: command
        value: bash main_script.sh
      artifacts:
        # Bash script to set flask file environment variable
      - name: main-script
        path: /app/main_script.sh
        raw:
          data: |
            # Setup env vars/other stuff
            export LC_ALL=C.UTF-8
            export LANG=C.UTF-8
            export FLASK_APP=/app/resources/open-pack-core/src/python/zquantum/optimizers/daemon-optimizer/proxy/rest.py
            # run python file
            python3 /app/start_proxy.py
      - name: start-proxy
        path: /app/start_proxy.py
        raw:
          data: |
            from zquantum.optimizers.daemon_optimizer.proxy import start_proxy

            start_proxy(8080)

  - name: wait-for-optimizer
    parent: generic-task
    inputs:
      parameters:
      - name: ip
      - name: command
        value: python3 get_argument_values.py
      - name: timeout
        value: 600
      artifacts:
      - name: get-argument-values
        path: /app/get_argument_values.py
        raw:
          data: |
            from zquantum.optimizers.daemon_optimizer.proxy import Client
            client = Client("{{inputs.parameters.ip}}", "8080")
            import time

            status = client.get_status()
            waiting_time = 0
            # GET status while status != "EVALUATING"
            while status != "EVALUATING" :
                status = client.get_status()
                time.sleep(1)
                waiting_time += 1
                if waiting_time > {{inputs.parameters.timeout}}:
                    break

  - name: get-argument-parameters
    parent: generic-task
    inputs:
      parameters:
      - name: ip
      - name: command
        value: python3 get_argument_values.py
      artifacts:
      - name: get-argument-values
        path: /app/get_argument_values.py
        raw:
          data: |
            from zquantum.optimizers.daemon_optimizer.proxy import Client
            import json

            client = Client("{{inputs.parameters.ip}}", "8080")

            argument_values = client.get_argument_values()
            # Save argument values to output art
            with open('/app/argument_values.json', 'w') as f:
              f.write(argument_values)

            with open('/app/evaluation_id.txt', 'w') as f:
              f.write(json.loads(argument_values)['optimization-evaluation-id'])
    outputs:
      parameters:
      - name: evaluation-id
        valueFrom:
          path: /app/evaluation_id.txt
      artifacts:
      - name: argument-values
        path: /app/argument_values.json

  - name: finish-evaluation
    parent: generic-task
    inputs:
      parameters:
      - name: ip
      - name: evaluation-id
      - name: command
        value: python3 send_evaluation_result.py
      artifacts:
      - name: evaluation-result
        path: /app/evaluation_result.json
      - name: send-evaluation-result
        path: /app/send_evaluation_result.py
        raw:
          data: |
            from zquantum.optimizers.daemon_optimizer.proxy import Client
            import time
            import http.client
            import json

            client = Client("{{inputs.parameters.ip}}", "8080")

            with open('/app/evaluation_result.json', 'r') as f:
                evaluation_result_string = f.read()

            # load eval result into json
            evaluation_result = json.loads(evaluation_result_string)

            # Add id from input param
            evaluation_result['optimization-evaluation-id'] = "{{inputs.parameters.evaluation-id}}"

            # take eval result back to string
            evaluation_result_string = json.JSONEncoder().encode(evaluation_result)

            # send eval result and set status to optimizing
            client.finish_evaluation(evaluation_result_string)

            status = client.get_status()
            while status == "OPTIMIZING":
              time.sleep(1)
              status = client.get_status()

            with open("/app/optimization_status.txt", "w") as f:
              f.write(status)
    outputs:
      parameters:
      - name: optimization-status
        valueFrom:
          path: /app/optimization_status.txt

