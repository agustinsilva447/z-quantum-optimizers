spec:
  templates:
  
  - name: run-optimizer
    parent: generic-task
    inputs:
      parameters:
      - name: ip
      - name: optimizer-specs
      - name: command
        value: bash main_script.sh
      artifacts:
      - name: initial-parameters
        path: /app/initial_parameters.json
        # Bash script to set flask file environment variable
      - name: main-script
        path: /app/main_script.sh
        raw:
          data: |
            # Setup env vars/other stuff
            export LC_ALL=C.UTF-8
            export LANG=C.UTF-8
            export FLASK_APP=/root/open-pack-core/python/zquantum/core/optimizer/proxy/rest.py
            # run python file
            python3 /app/start_proxy.py
      - name: start-proxy
        path: /app/start_proxy.py
        raw:
          data: |
            from zquantum.optimizers.daemon_optimizer.optimize import optimize_variational_circuit_with_proxy
            from zquantum.optimizers.daemon_optimizer.optimizer.proxy import Client
            from zquantum.core.circuit import load_circuit_template_params
            from zquantum.optimizers import save_optimization_results
            from zquantum.core.utils import create_object
            
            # Load initial params
            params = load_circuit_template_params('/app/initial_parameters.json')
            print("PARAMETERS: {}".format(params), flush=True)

            optimizer_specs = {{inputs.parameters.optimizer-specs}}
            optimizer = create_object(optimizer_specs)

            proxy_client = Client("{{inputs.parameters.ip}}", "8080")
            opt_results = optimize_variational_circuit_with_proxy(params,
                optimizer, proxy_client)
            print("OPTIMIZATION HAS FINISHED:\n{}".format(opt_results), flush=True)

            save_optimization_results(opt_results, '/app/optimization_results.json')
    outputs:
      artifacts:
        - name: optimization-results
          path: /app/optimization_results.json

            
